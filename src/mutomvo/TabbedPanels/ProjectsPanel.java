package mutomvo.TabbedPanels;

import java.awt.event.MouseEvent;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreePath;
import javax.swing.tree.TreeSelectionModel;
import mutomvo.Exceptions.MutomvoException;
import mutomvo.MutomvoGUIView;
import mutomvo.TabbedPanels.dataClasses.MutationProject;
import mutomvo.Utils.Utils;

/**
 *
 * @author cana
 */
public class ProjectsPanel extends javax.swing.JPanel {

    // Main frame
    public MutomvoGUIView mainFrame;    
    DefaultMutableTreeNode root;
        
    /**
     * Creates new form ProjectsPanel
     * 
     * @param mainFrame
     */
    public ProjectsPanel(MutomvoGUIView mainFrame){  
        
        initComponents();
        
        this.mainFrame = mainFrame;
        
        try{
            loadProjects();
            textAreaDescription.setText(Utils.initComment);
        }
        catch (MutomvoException e){
            Utils.showErrorMessage("Error while loading the existing projects", "Error");
        }
    }
    
    /**
     * Loads existing projects into the tree
     */
    private void loadProjects() throws MutomvoException{    
                        
        DefaultTreeModel treeModel;

            // Add the root
            root = new DefaultMutableTreeNode(Utils.nodeRoot);
            treeModel = new DefaultTreeModel(root);  
            
             // Set the root invisible! :)
            treeArea.setRootVisible(true);
            treeArea.setModel(treeModel);
        
            // Set single selection
            treeArea.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);  
            
            // Update the tree with the existing projects
            Utils.updateTreeNode(Utils.projectsFolder, root); 
            
            treeArea.expandRow(0);
            treeArea.updateUI();            
    }

    /**
     * Updates the tree.
     */
    public void updateTree (){   
        
        try{
            Utils.updateTreeNode(Utils.projectsFolder, root);             
            treeArea.expandRow(0);
            treeArea.updateUI(); 
        }
        catch (MutomvoException e){
            Utils.showErrorMessage("Error while updating the tree", "Error");
        }
    }
    
    /**
     * Shows the description of the selected project
     */
    private void showDescription (MutationProject project){
    
        String text;
        int i;
        
        try
        {
            // Clear the area
            text = "";
            textAreaDescription.setText(text);
        
            // Project name
            text += "Project Name:" + project.getProjectName() + "\n";
            
            // Application to mutate
            text += "   - Source program:" + project.getSourceProgramPath() + "\n";
            
            // Mutants folder
            text += "   - Project folder" + project.getProjectFolder() + "\n";
            
             // Fixed mutants
            if (project.useFixedMutants()){
                text += "   - # Fixed mutants:" + Integer.toString(project.getNumFixedMutants()) + "\n";
            }
            else
                text += "   - #Generated mutants (not fixed):" + Integer.toString(project.getNumGeneratedMutants()) + "\n";
                    
            // Mutant operators
            text += "   - Selected operators:\n";
            
            for (i=0; i<project.getNumOperators(); i++){
            
                if (project.getOperatorByIndex(i).isIsSelected()){
                    text += "     -> " + project.getOperatorByIndex(i).getAcronym() + "\n";
                }            
            }
            
            // Test information
            text += "   - Test configuration:\n";
            
            if (project.useFixedTests())            
                text += "      > # Fixed tests: " + Integer.toString(project.getNumFixedTests()) + "\n";
            else
                text += "      > # Generated tests: " + Integer.toString(project.getNumGeneratedTests()) + "\n";
            
            text += "      > # Test file:\n" + project.getTestConfigLine() + "\n";
            
            
            textAreaDescription.setText(text);
        }catch(NullPointerException e)
        {
           Utils.showErrorMessage("Error updating the description", "Error"); 
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        textComment = new javax.swing.JTextArea();
        popUpMenu = new javax.swing.JPopupMenu();
        popUpMenuLoad = new javax.swing.JMenuItem();
        popUpMenuRemove = new javax.swing.JMenuItem();
        jLabel4 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        treeArea = new javax.swing.JTree();
        jScrollPane4 = new javax.swing.JScrollPane();
        textAreaDescription = new javax.swing.JTextArea();

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(mutomvo.MutomvoGUIApp.class).getContext().getResourceMap(ProjectsPanel.class);
        jLabel2.setText(resourceMap.getString("jLabel2.text")); // NOI18N
        jLabel2.setName("jLabel2"); // NOI18N

        jScrollPane2.setName("jScrollPane2"); // NOI18N

        textComment.setColumns(20);
        textComment.setRows(5);
        textComment.setName("textComment"); // NOI18N
        jScrollPane2.setViewportView(textComment);

        popUpMenu.setName("popUpMenu"); // NOI18N

        popUpMenuLoad.setText(resourceMap.getString("popUpMenuLoad.text")); // NOI18N
        popUpMenuLoad.setName("popUpMenuLoad"); // NOI18N
        popUpMenuLoad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                popUpMenuLoadActionPerformed(evt);
            }
        });
        popUpMenu.add(popUpMenuLoad);

        popUpMenuRemove.setText(resourceMap.getString("popUpMenuRemove.text")); // NOI18N
        popUpMenuRemove.setName("popUpMenuRemove"); // NOI18N
        popUpMenuRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                popUpMenuRemoveActionPerformed(evt);
            }
        });
        popUpMenu.add(popUpMenuRemove);

        setBackground(resourceMap.getColor("Form.background")); // NOI18N
        setName("Form"); // NOI18N
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel4.setText(resourceMap.getString("jLabel4.text")); // NOI18N
        jLabel4.setName("jLabel4"); // NOI18N
        add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 20, -1, -1));

        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, -1, -1));

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        treeArea.setName("treeArea"); // NOI18N
        treeArea.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                treeAreaMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(treeArea);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 40, 140, 460));

        jScrollPane4.setName("jScrollPane4"); // NOI18N

        textAreaDescription.setBackground(resourceMap.getColor("textAreaDescription.background")); // NOI18N
        textAreaDescription.setColumns(20);
        textAreaDescription.setForeground(resourceMap.getColor("textAreaDescription.foreground")); // NOI18N
        textAreaDescription.setRows(5);
        textAreaDescription.setName("textAreaDescription"); // NOI18N
        jScrollPane4.setViewportView(textAreaDescription);

        add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 50, 630, 450));
    }// </editor-fold>//GEN-END:initComponents

    private void treeAreaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_treeAreaMouseClicked
  
        DefaultMutableTreeNode node;
        String selectedProject;
        MutationProject project;
        TreePath tPath;
        
        // Init...
        project = null;
        selectedProject = "";

        // Right click
        if (evt.getButton() == MouseEvent.BUTTON3){

            // One item has been selected
            if (treeArea.getPathForLocation(evt.getX(), evt.getY()) != null){

                // Get selected component
                tPath = treeArea.getSelectionPath();
                if(tPath != null)
                {
                    node = (DefaultMutableTreeNode) tPath.getLastPathComponent();

                    // Is a leaf node?
                    if (node != null && node.isLeaf()){
                        popUpMenu.show(evt.getComponent(), evt.getX(), evt.getY());
                    }
                }
            }
        }      

        // Double click!
        else if ((evt.getClickCount() == 2) && (evt.getButton() != MouseEvent.BUTTON3)){

             // One item has been clicked!
            if (treeArea.getPathForLocation(evt.getX(), evt.getY()) != null){

                // Get selected component (load in panel)
                node = (DefaultMutableTreeNode) treeArea.getSelectionPath().getLastPathComponent();

                if (node.isLeaf()){                                                

                    // Load selected project
                    selectedProject = treeArea.getSelectionPath().getLastPathComponent().toString();

                    try{
                        if (!"".equals(selectedProject))
                            project = Utils.loadMutationProject(selectedProject);
                    }
                    catch(MutomvoException e){
                        Utils.showErrorMessage(e.getLocalizedMessage(), "Error while loading a project to show the description:" + selectedProject);
                    }

                    // Show the project description
                    this.showDescription (project);
                }                    
            }
        }        
    }//GEN-LAST:event_treeAreaMouseClicked

    private void popUpMenuLoadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_popUpMenuLoadActionPerformed
       
        boolean ok;
        MutationProject project;
        
        ok = mainFrame.loadProject(treeArea.getSelectionPath().getLastPathComponent().toString());
        
        try{
            // Show description
            if (ok){
                project = Utils.loadMutationProject(treeArea.getSelectionPath().getLastPathComponent().toString());
                this.showDescription(project);
                mainFrame.showMutationPanel();
            }
        }
        catch (Exception e){
            Utils.showErrorMessage(e.getLocalizedMessage(), "Error while loading a project to show its description");
        }
    }//GEN-LAST:event_popUpMenuLoadActionPerformed

    private void popUpMenuRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_popUpMenuRemoveActionPerformed
       
        boolean requiredUpdate;
        String projectName;

        // Get the name of the project to be removed
        projectName = treeArea.getSelectionPath().getLastPathComponent().toString();

        try{
            // Remove selected project
            requiredUpdate = Utils.removeComponent(Utils.projectsFolder, projectName);

            // Update the tree
            if (requiredUpdate){
                this.updateTree();
            }
        }
        catch(MutomvoException e){
            Utils.showErrorMessage(e.getLocalizedMessage(), "Error while removing project: " + projectName);
        }        
    }//GEN-LAST:event_popUpMenuRemoveActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JPopupMenu popUpMenu;
    private javax.swing.JMenuItem popUpMenuLoad;
    private javax.swing.JMenuItem popUpMenuRemove;
    private javax.swing.JTextArea textAreaDescription;
    private javax.swing.JTextArea textComment;
    private javax.swing.JTree treeArea;
    // End of variables declaration//GEN-END:variables
}
