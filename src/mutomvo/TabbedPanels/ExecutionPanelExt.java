/*
 * ExecutionPanel.java
 *
 * Created on Apr 24, 2015, 11:44:57 AM
 */
package mutomvo.TabbedPanels;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Rectangle;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.ObjectInputStream;
import java.io.PrintWriter;
import java.net.DatagramSocket;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.Map;
import javax.swing.JTable;
import mutomvo.Mutation.Execution.auxiliars.IMuTeXec;
import mutomvo.Mutation.Execution.JavaMuTeXec;

/**
 *
 * @author cana
 */
public class ExecutionPanelExt extends javax.swing.JDialog implements Runnable, WindowListener {

    private final static String processName = "SIMCAN-MuTeXec";
    private String mutexec = "./test.sh";
    private final int panelWidth = 900;
    private final int panelHeight = 500;
    private final int MIN_PORT_NUMBER = 1024;
    private final int MAX_PORT_NUMBER = 49151;
    private Thread executor;
    private IMuTeXec exec;
    private Thread runner;
    private String scenarioName;
    private int nGeneratedMutants;
    private int nGeneratedTests;
    private String application;
    private boolean m_bRunning;
    private long startTime;
    /** 
     * Constructor 
     */
    public ExecutionPanelExt(java.awt.Frame parent, boolean modal, IMuTeXec exec) {
        super(parent, modal);
        initComponents();

        this.setMinimumSize(new Dimension(panelWidth, panelHeight));
        this.setMaximumSize(new Dimension(panelWidth, panelHeight));
        this.setResizable(false);
        this.addWindowListener(this);
        this.setVisible(false);
        scenarioName = "";
        this.executor = new Thread((JavaMuTeXec)exec, "JavaMuTeXec");
        m_bRunning = false;
        this.exec = exec;
        textIntervalInit.setText("0");
        
    }

    /**
     * Reset the execution panel for executing a new scenario
     * 
     * @param newScenario Scenario for the simulation
     */
    public void reset(String newScenario) {
        scenarioName = newScenario;
        textLog.setText("Press start to begin the testing process...");
    }

    /**
     *
     * @param newScenarioDir
     */
    public void startSimulation() {
        m_bRunning = true;
        startTime = System.currentTimeMillis();
        runner = new Thread(this, "ThreadName");
        runner.start(); 
        buttonStart.setEnabled(false);
    }

    public void run() {

        String line;
        String simcanPath;
        File simulationDir;
        File workingDir;
        ProcessBuilder builder;
        Map<String, String> env;
        Process process;
        InputStream is;
        InputStreamReader isr;
        BufferedReader br;
        int i, portNumber;

       
        
        try {

            executor.start();    
            updateTime();
            //actualizamos
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void stopExecution() {

        ProcessBuilder builder;
        
        exec.Abort();
        endOfProcess();
        builder = new ProcessBuilder("bash", "-c", "killall -9 " + processName);

        try {
            builder.start();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * Checks to see if a specific port is available.
     *
     * @param port the port to check for availability
     */
    public boolean available(int port) {
        if (port < MIN_PORT_NUMBER || port > MAX_PORT_NUMBER) {
            throw new IllegalArgumentException("Invalid start port: " + port);
        }

        ServerSocket ss = null;
        DatagramSocket ds = null;
        try {
            ss = new ServerSocket(port);
            ss.setReuseAddress(true);
            ds = new DatagramSocket(port);
            ds.setReuseAddress(true);
            return true;
        } catch (IOException e) {
        } finally {
            if (ds != null) {
                ds.close();
            }

            if (ss != null) {
                try {
                    ss.close();
                } catch (IOException e) {
                    /* should not be thrown */
                }
            }
        }

        return false;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        scrollLog = new javax.swing.JScrollPane();
        textLog = new javax.swing.JTextArea();
        buttonStart = new javax.swing.JButton();
        buttonStop = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        totalBar = new javax.swing.JProgressBar();
        actualBar = new javax.swing.JProgressBar();
        jLabel2 = new javax.swing.JLabel();
        labelState = new javax.swing.JLabel();
        timeLabel = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        timeRemLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        mutTextArea = new javax.swing.JTextArea();
        checkAllTests = new javax.swing.JCheckBox();
        checkMT = new javax.swing.JCheckBox();
        checkInterval = new javax.swing.JCheckBox();
        textIntervalInit = new javax.swing.JTextField();
        textIntervalEnd = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setName("Form"); // NOI18N
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        scrollLog.setName("scrollLog"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(mutomvo.MutomvoGUIApp.class).getContext().getResourceMap(ExecutionPanelExt.class);
        textLog.setBackground(resourceMap.getColor("textLog.background")); // NOI18N
        textLog.setColumns(20);
        textLog.setForeground(resourceMap.getColor("textLog.foreground")); // NOI18N
        textLog.setRows(5);
        textLog.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        textLog.setName("textLog"); // NOI18N
        scrollLog.setViewportView(textLog);

        getContentPane().add(scrollLog, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 26, 600, 340));

        buttonStart.setText(resourceMap.getString("buttonStart.text")); // NOI18N
        buttonStart.setName("buttonStart"); // NOI18N
        buttonStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonStartActionPerformed(evt);
            }
        });
        getContentPane().add(buttonStart, new org.netbeans.lib.awtextra.AbsoluteConstraints(275, 434, -1, -1));

        buttonStop.setText(resourceMap.getString("buttonStop.text")); // NOI18N
        buttonStop.setName("buttonStop"); // NOI18N
        buttonStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonStopActionPerformed(evt);
            }
        });
        getContentPane().add(buttonStop, new org.netbeans.lib.awtextra.AbsoluteConstraints(566, 434, -1, -1));

        jLabel1.setFont(resourceMap.getFont("jLabel1.font")); // NOI18N
        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 0, 240, 20));

        totalBar.setName("totalBar"); // NOI18N
        totalBar.setStringPainted(true);
        getContentPane().add(totalBar, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 389, 859, 33));

        actualBar.setName("actualBar"); // NOI18N
        actualBar.setStringPainted(true);
        getContentPane().add(actualBar, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 372, 859, 11));
        actualBar.getAccessibleContext().setAccessibleName(resourceMap.getString("actualBar.AccessibleContext.accessibleName")); // NOI18N
        actualBar.getAccessibleContext().setAccessibleDescription(resourceMap.getString("actualBar.AccessibleContext.accessibleDescription")); // NOI18N

        jLabel2.setText(resourceMap.getString("jLabel2.text")); // NOI18N
        jLabel2.setName("jLabel2"); // NOI18N
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 440, -1, -1));

        labelState.setText(resourceMap.getString("labelState.text")); // NOI18N
        labelState.setName("labelState"); // NOI18N
        getContentPane().add(labelState, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 440, -1, -1));

        timeLabel.setText(resourceMap.getString("timeLabel.text")); // NOI18N
        timeLabel.setName("timeLabel"); // NOI18N
        getContentPane().add(timeLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(800, 430, 70, -1));

        jLabel3.setText(resourceMap.getString("jLabel3.text")); // NOI18N
        jLabel3.setName("jLabel3"); // NOI18N
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 430, -1, -1));

        jLabel4.setText(resourceMap.getString("jLabel4.text")); // NOI18N
        jLabel4.setName("jLabel4"); // NOI18N
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 450, -1, -1));

        timeRemLabel.setText(resourceMap.getString("timeRemLabel.text")); // NOI18N
        timeRemLabel.setName("timeRemLabel"); // NOI18N
        getContentPane().add(timeRemLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(800, 450, 70, -1));

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        mutTextArea.setColumns(20);
        mutTextArea.setEditable(false);
        mutTextArea.setForeground(resourceMap.getColor("mutTextArea.foreground")); // NOI18N
        mutTextArea.setRows(5);
        mutTextArea.setName("mutTextArea"); // NOI18N
        jScrollPane1.setViewportView(mutTextArea);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 30, -1, 110));

        checkAllTests.setText(resourceMap.getString("checkAllTests.text")); // NOI18N
        checkAllTests.setName("checkAllTests"); // NOI18N
        checkAllTests.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkAllTestsActionPerformed(evt);
            }
        });
        getContentPane().add(checkAllTests, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 340, -1, -1));

        checkMT.setText(resourceMap.getString("checkMT.text")); // NOI18N
        checkMT.setName("checkMT"); // NOI18N
        getContentPane().add(checkMT, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 340, -1, -1));

        checkInterval.setText(resourceMap.getString("checkInterval.text")); // NOI18N
        checkInterval.setName("checkInterval"); // NOI18N
        getContentPane().add(checkInterval, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 310, -1, -1));

        textIntervalInit.setText(resourceMap.getString("textIntervalInit.text")); // NOI18N
        textIntervalInit.setName("textIntervalInit"); // NOI18N
        getContentPane().add(textIntervalInit, new org.netbeans.lib.awtextra.AbsoluteConstraints(780, 310, 30, -1));

        textIntervalEnd.setText(resourceMap.getString("textIntervalEnd.text")); // NOI18N
        textIntervalEnd.setName("textIntervalEnd"); // NOI18N
        getContentPane().add(textIntervalEnd, new org.netbeans.lib.awtextra.AbsoluteConstraints(820, 310, 30, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buttonStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonStartActionPerformed
        startSimulation();
    }//GEN-LAST:event_buttonStartActionPerformed

    private void buttonStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonStopActionPerformed
        stopExecution();
    }//GEN-LAST:event_buttonStopActionPerformed

private void checkAllTestsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkAllTestsActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_checkAllTestsActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JProgressBar actualBar;
    private javax.swing.JButton buttonStart;
    private javax.swing.JButton buttonStop;
    private javax.swing.JCheckBox checkAllTests;
    private javax.swing.JCheckBox checkInterval;
    private javax.swing.JCheckBox checkMT;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel labelState;
    private javax.swing.JTextArea mutTextArea;
    private javax.swing.JScrollPane scrollLog;
    private javax.swing.JTextField textIntervalEnd;
    private javax.swing.JTextField textIntervalInit;
    private javax.swing.JTextArea textLog;
    private javax.swing.JLabel timeLabel;
    private javax.swing.JLabel timeRemLabel;
    private javax.swing.JProgressBar totalBar;
    // End of variables declaration//GEN-END:variables

    public void windowOpened(WindowEvent e) {
    }

    public void windowClosing(WindowEvent e) {
        stopExecution();
        this.setVisible(false);
    }

    public void windowClosed(WindowEvent e) {
    }

    public void windowIconified(WindowEvent e) {
    }

    public void windowDeiconified(WindowEvent e) {
    }

    public void windowActivated(WindowEvent e) {
    }

    public void windowDeactivated(WindowEvent e) {
    }

    void setCfg(int nGeneratedMutants, int nGeneratedTests, String application) {
        this.nGeneratedMutants = nGeneratedMutants;
        this.nGeneratedTests = nGeneratedTests;
        this.application = application;
        textLog.setText("APP: " + application + " | Generated mutants " + Integer.toString(nGeneratedMutants) + ", tests: " + Integer.toString(nGeneratedTests));
    }

    public void printLine(String string) {

        //Proteger la inclusión de elementos en la lista con mutex

        //Añadir el elemento
        textLog.setText(textLog.getText() + string + "\n");
    }

    public void setActBarIndet(boolean bIndet) {
        actualBar.setIndeterminate(bIndet);

    }

    public void setState(String toString) {
        labelState.setText(toString);
    }

    public void setBarsColor(Color color) {
        actualBar.setStringPainted(true);
        actualBar.setForeground(color);
        actualBar.setString("Error");
    }

    public void setActBarRange(int min, int max) {
        actualBar.setMinimum(min);
        actualBar.setMinimum(max);
    }

    public void setActBarValue(int nIndexTest) {
        Rectangle progressRect = actualBar.getBounds();//important line
        actualBar.setValue(nIndexTest);
        actualBar.repaint();
        actualBar.paintImmediately(progressRect);
    }

    public void setTotalBarValue(int nValue) {
        Rectangle progressRect = actualBar.getBounds();//important line
        totalBar.setValue(nValue);
        totalBar.repaint();
        totalBar.paintImmediately(progressRect);
    }

    public void updateTime() {
        try {
            while (true) {
                if(m_bRunning)
                {
                    //geting Time in desire format
                    timeLabel.setText(getTimeElapsed());
                
                }
                //Thread sleeping for 1 sec
                Thread.currentThread().sleep(1000);
            }
        } catch (Exception e) {
            System.out.println("Exception in Thread Sleep : " + e);
        }
    }

    public String getTimeElapsed() {
        long elapsedTime = System.currentTimeMillis() - startTime;
        elapsedTime = elapsedTime / 1000;

        return TimeToString(elapsedTime);

    }
    private String TimeToString(long elapsedTime) {
        
        String seconds = Integer.toString((int) (elapsedTime % 60));
        String minutes = Integer.toString((int) ((elapsedTime % 3600) / 60));
        String hours = Integer.toString((int) (elapsedTime / 3600));

        if (seconds.length() < 2) {
            seconds = "0" + seconds;
        }

        if (minutes.length() < 2) {
            minutes = "0" + minutes;
        }

        if (hours.length() < 2) {
            hours = "0" + hours;
        }

        return hours + ":" + minutes + ":" + seconds;
    }
    public void setRemTime(int nMilliseconds) {
        
        nMilliseconds = nMilliseconds/1000;
        timeRemLabel.setText(TimeToString(nMilliseconds));
    }
    public void endOfProcess()
    {
        m_bRunning = false;
        buttonStart.setEnabled(true);
    }

    public void updateTextArea(String strRes) {
        
        //mutTextArea.insert(strRes, 0);
        mutTextArea.setText(strRes);
    }

    public boolean getAllTestExecution() {
        return checkAllTests.isSelected();
    }

    public boolean getMultiThreading() {
        return checkMT.isSelected();
    }

    public boolean isInterval()
    {
        return checkInterval.isSelected();
    }
    public int getInitInterval()
    {
        int nInt;
        
        nInt = Integer.parseInt(textIntervalInit.getText());
        
        return nInt;
    }
    public int getEndInterval()
    {
        int nInt;
        
        nInt = Integer.parseInt(textIntervalEnd.getText());
        
        return nInt;
    }

    public void setEndInterval(int nMutants) {
        textIntervalEnd.setText(Integer.toString(nMutants));
    }
}
