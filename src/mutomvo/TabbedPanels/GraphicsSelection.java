/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * GraphicsSelection.java
 *
 * Created on Sep 3, 2015, 11:14:24 PM
 */
package mutomvo.TabbedPanels;

import java.awt.Image;
import java.io.File;
import java.io.IOException;
import java.net.URL;
import java.util.LinkedList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JCheckBox;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;
import mutomvo.Exceptions.MutomvoException;
import mutomvo.Mutation.ReportGenerator.graphGenerator;
import mutomvo.Mutation.ReportGenerator.reportGenerator;
import mutomvo.Tables.MutationTableResModel;
import mutomvo.Utils.Utils;
import static mutomvo.Mutation.ReportGenerator.StatsPersistence.STATS_MAIN_FOLDER;

/**
 *
 * @author Pablo C. Ca√±izares 
 */
public class GraphicsSelection extends javax.swing.JDialog {
    private static DefaultTableModel modelApps;
    private static DefaultTableModel modelReports;
    private static DefaultTableModel modelGraphs;
    
    /** Creates new form GraphicsSelection */
    public GraphicsSelection(java.awt.Frame parent) {
        super(parent, true);
        initComponents();
        initTables();
        loadImage("graphHeatmap2d");
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tableApplications = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableReports = new javax.swing.JTable();
        buttonGenerate = new javax.swing.JButton();
        buttonCancel = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        buttonDisplay = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        tableGraphs = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(mutomvo.MutomvoGUIApp.class).getContext().getResourceMap(GraphicsSelection.class);
        setTitle(resourceMap.getString("Form.title")); // NOI18N
        setName("Form"); // NOI18N

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        tableApplications.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tableApplications.setName("tableApplications"); // NOI18N
        jScrollPane1.setViewportView(tableApplications);

        jScrollPane2.setName("jScrollPane2"); // NOI18N

        tableReports.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tableReports.setName("tableReports"); // NOI18N
        jScrollPane2.setViewportView(tableReports);

        buttonGenerate.setText(resourceMap.getString("buttonGenerate.text")); // NOI18N
        buttonGenerate.setName("buttonGenerate"); // NOI18N
        buttonGenerate.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                buttonGenerateMouseClicked(evt);
            }
        });
        buttonGenerate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonGenerateActionPerformed(evt);
            }
        });

        buttonCancel.setText(resourceMap.getString("buttonCancel.text")); // NOI18N
        buttonCancel.setName("buttonCancel"); // NOI18N

        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N

        jLabel2.setText(resourceMap.getString("jLabel2.text")); // NOI18N
        jLabel2.setName("jLabel2"); // NOI18N

        buttonDisplay.setText(resourceMap.getString("buttonDisplay.text")); // NOI18N
        buttonDisplay.setName("buttonDisplay"); // NOI18N

        jScrollPane3.setName("jScrollPane3"); // NOI18N

        tableGraphs.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tableGraphs.setName("tableGraphs"); // NOI18N
        tableGraphs.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableGraphsMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(tableGraphs);

        jLabel3.setText(resourceMap.getString("jLabel3.text")); // NOI18N
        jLabel3.setName("jLabel3"); // NOI18N

        jLabel4.setText(resourceMap.getString("jLabel4.text")); // NOI18N
        jLabel4.setName("jLabel4"); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(75, 75, 75)
                            .addComponent(buttonGenerate)
                            .addGap(39, 39, 39)
                            .addComponent(buttonCancel))
                        .addGroup(layout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(jLabel2))
                        .addGroup(layout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(jLabel1))
                        .addGroup(layout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 253, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane3, 0, 0, Short.MAX_VALUE)
                            .addComponent(jScrollPane2, 0, 0, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel3)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(buttonDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, 376, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(46, 46, 46))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(buttonDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, 317, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel4))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 9, Short.MAX_VALUE)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(buttonGenerate)
                            .addComponent(buttonCancel))))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void buttonGenerateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonGenerateActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_buttonGenerateActionPerformed

private void tableGraphsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableGraphsMouseClicked

    int nRow;
    String strName;
    
    nRow = tableGraphs.rowAtPoint(evt.getPoint());
    strName = (String) tableGraphs.getModel().getValueAt(nRow, 0);
    
    loadImage(strName);
}//GEN-LAST:event_tableGraphsMouseClicked

private void buttonGenerateMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_buttonGenerateMouseClicked

    //Generate reports!!
    int nRowsGraph, nRowsReport;
    LinkedList<String> repList, graphList, appList;
    String strValue;
    
    repList = getElements(tableReports);
    graphList = getElements(tableGraphs);
    appList = getElements(tableApplications);
    
    generateReport(appList,repList,graphList);
}//GEN-LAST:event_buttonGenerateMouseClicked
private LinkedList<String> getElements(JTable table)
{
    LinkedList<String> retList;
    String strLine, strName;
    int nRows;
    boolean bSelected;
    
    retList = null;
    nRows = table.getRowCount();
    
    if(nRows>0)
    {
        retList = new LinkedList<String>();
        for(int i=0;i<nRows;i++)
        {
            bSelected = (Boolean) table.getModel().getValueAt(i, 1);
            bSelected = true; //TODO:: Cambiar x dios
            if(bSelected)
            {
                strName = (String) table.getModel().getValueAt(i, 0);
                retList.add(strName);
            }
        }
    }
    
    return retList;
}

    LinkedList<LinkedList<String>> startApplications()
    {        
        //Read applications from jar
        LinkedList<LinkedList<String>> appList;
                
        appList = new LinkedList<LinkedList<String>>();
        
        return appList;
    }
    
    /**
     * Initializes an application table including the corresponding comboBox (used in nodePanel)
     *
     * @param table Applications table
     */
    public void initTables() {

        int currentRow;      
        JCheckBox checkBox;       
        TableColumn muColumn;
        DefaultTableCellRenderer renderer;
        LinkedList applicationList;
        LinkedList<String> reports, graphics;
        Utils utilData;
        
        try {           
            utilData = new Utils();
            
            // Create a new table model
            modelApps = new MutationTableResModel();
            modelApps.setColumnCount(Utils.columnNamesAppInGraphGen.length);
            modelApps.setColumnIdentifiers(Utils.columnNamesAppInGraphGen);

            //Create reports table model
            modelReports = new MutationTableResModel();
            modelReports.setColumnCount(Utils.columnNamesAppInGraphGen.length);
            modelReports.setColumnIdentifiers(Utils.columnNamesAppInGraphGen);  
            
            modelGraphs = new MutationTableResModel();
            modelGraphs.setColumnCount(Utils.columnNamesAppInGraphGen.length);
            modelGraphs.setColumnIdentifiers(Utils.columnNamesAppInGraphGen);
            
            //Load the application list
            applicationList = loadApplicationList();
            
            reports = utilData.loadFromJar(Utils.pathToReportsClasses);
        
            graphics = utilData.loadFromJar(Utils.pathToGraphsClasses);
            if(applicationList != null)
            {
                // Init values...
                for (currentRow = 0; currentRow < applicationList.size(); currentRow++) {
                    modelApps.addRow(new Object[]{applicationList.get(currentRow), true});
                }
                for (currentRow = 0; currentRow < reports.size(); currentRow++) {
                    modelReports.addRow(new Object[]{reports.get(currentRow), true});
                }       
                for (currentRow = 0; currentRow < graphics.size(); currentRow++) {
                    modelGraphs.addRow(new Object[]{graphics.get(currentRow), true});
                }                   
                // Set new model
                tableApplications.setModel(modelApps);  
                tableReports.setModel(modelReports);  
                tableGraphs.setModel(modelGraphs);  
                
                // Set a new column model                
                configureModel(tableApplications.getColumnModel());
                configureModel(tableReports.getColumnModel());
                configureModel(tableGraphs.getColumnModel());
                
                // Update table
                tableApplications.setShowGrid(true);
                tableApplications.updateUI();
            }
            
        } 
        
        catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    LinkedList<String> loadApplicationList()
    {
//     ApplicationCollection appsInRepo = new ApplicationCollection();
       LinkedList<String> appList;
       File fileAppStats;
       File fileList[];
       
       appList = null;
       fileAppStats = new File(STATS_MAIN_FOLDER+File.separatorChar);
       
        //In this case, it is necessary to read only the folders existing in stats
       fileList = fileAppStats.listFiles();
        
       if(fileList != null)
       {
           appList = new LinkedList<String>();
           for(File file : fileList) {
                
               if(file.isDirectory())
                   appList.add(file.getName());
           }
       }

       return appList;
    }
    
    void testImage()
    {
      try {
          java.net.URL url = getClass().getResource("resources/appHPC.png");
          
          if(url != null)
          {
            Image img = ImageIO.read(url);
            Image newimg = img.getScaledInstance( buttonDisplay.getWidth(), buttonDisplay.getHeight(),  java.awt.Image.SCALE_SMOOTH ) ;  
            buttonDisplay.setIcon(new ImageIcon(newimg));
          }            
      } catch (IOException ex) {
      }
    }
    void loadImage(String strName)
    {
      try {
          java.net.URL url = getClass().getResource("resources/"+strName+".png");
          
          if(url != null)
          {
            Image img = ImageIO.read(url);
            Image newimg = img.getScaledInstance( buttonDisplay.getWidth(), buttonDisplay.getHeight(),  java.awt.Image.SCALE_SMOOTH ) ;  
            buttonDisplay.setIcon(new ImageIcon(newimg));
          }            
      } catch (IOException ex) {
      }
    }    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonCancel;
    private javax.swing.JButton buttonDisplay;
    private javax.swing.JButton buttonGenerate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable tableApplications;
    private javax.swing.JTable tableGraphs;
    private javax.swing.JTable tableReports;
    // End of variables declaration//GEN-END:variables


    private void generateReport(LinkedList<String> appList, LinkedList<String> repList, LinkedList<String> graphList)
    {
        reportGenerator reporter = new reportGenerator();
        graphGenerator graph =  new graphGenerator();
        LinkedList<String> strApps;
        String strApp;

        if(reporter.scanStats())
        {
            strApps = reporter.getAppStats();

            if(strApps != null && strApps.size()>0)
            {
                for(int i=0;i<strApps.size();i++)
                {
                    strApp = strApps.get(i);

                    if(appList.contains(strApp))
                    {
                        System.out.print("Generating reports: "+strApp);
                        reporter.generateReport(strApp);

                        graph.generateGraph(reporter);                    
                    }
                }
            }
        }
    }

    private void configureModel(TableColumnModel columnModel) {
        
        columnModel.getColumn(0).setWidth(200);
        columnModel.getColumn(0).setMaxWidth(200);
        columnModel.getColumn(0).setMinWidth(100);
        columnModel.getColumn(0).setResizable(false);

        columnModel.getColumn(1).setWidth(80);            
        columnModel.getColumn(1).setMaxWidth(80);
        columnModel.getColumn(1).setMinWidth(80);
        columnModel.getColumn(1).setResizable(false);
                
    }
}
