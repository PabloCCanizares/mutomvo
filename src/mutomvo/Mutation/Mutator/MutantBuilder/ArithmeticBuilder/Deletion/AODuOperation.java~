/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package mutomvo.Mutation.Mutator.MutantBuilder.ArithmeticBuilder.Deletion;

import java.util.ArrayList;
import java.util.List;
import mutomvo.Mutation.Mutator.MutantBuilder.ArithmeticBuilder.IArithmeticMutation;
import mutomvo.Mutation.Operators.Method.Arithmetic.ArithmeticOperator;
import mutomvo.Mutation.Operators.Method.Arithmetic.EnumARTypes;
import mutomvo.Mutation.Operators.Method.Arithmetic.EnumBinArithmetic;
import mutomvo.Mutation.Operators.Method.EnumMuOperation;
import mutomvo.Mutation.Operators.Method.EnumOperator;
import mutomvo.Mutation.Operators.MutatedOperator;
import mutomvo.Mutation.Operators.MutationOperator;

/**
 *
 * @author Pablo C. Ca√±izares 
 */
public class AODuOperation implements IArithmeticMutation {
 List<EnumBinArithmetic> ArithmeticList;

    public AODuOperation() 
    {
        //TODO: Cambiar a un foreach
        ArithmeticList = new ArrayList<EnumBinArithmetic>();

        for (EnumBinArithmetic eENUM : EnumBinArithmetic.values()) 
        {
           if(eENUM.getType() == EnumARTypes.eARType_Unary)
                ArithmeticList.add(eENUM);
        }     
    }

    @Override
    public List<MutatedOperator> doMutation(MutationOperator Operator) {
        List<MutatedOperator> muList = new ArrayList<MutatedOperator>();
        
        String strEnum, strOperator;
        if(Operator.getOperatorType() == EnumOperator.eARITHMETIC)
        {
            ArithmeticOperator oArithOp = (ArithmeticOperator) Operator;
            
            if(oArithOp.getEnum().getType() == EnumARTypes.eARType_Unary)
            {
                MutatedOperator muOperator = new MutatedOperator(Operator);
                muOperator.mutate("", EnumMuOperation.eAODu);
                muList.add(muOperator);
            }
        }

        return muList;
    }   
}
