/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package mutomvo.Mutation.Execution.info.mutants;

import mutomvo.Mutation.Operators.EnumOperatorClass;
import mutomvo.Mutation.Operators.Method.EnumMuOperation;
import mutomvo.Mutation.Execution.auxiliars.EnumMutantState;
import mutomvo.Mutation.Execution.info.tests.TestExecutionInfo;
import mutomvo.Mutation.Execution.info.tests.testInfo;

/**
 *
 * @author Pablo C. Ca√±izares 
 */
public class mutantInfo 
{
    int nNumber;
    EnumMutantState eState; //State of the mutant Dead=0, Alive =1
    int nTestKiller; //Number of test that kills the mutant
    String strFullDescription; //Brief description: type of mutant, line of code ...    
    String strMutatedToken;
    TestExecutionInfo testInfo;
    
    EnumMutantState mState;             // Dead or Alive
    EnumOperatorClass mutationClass;    //Class of mutation operator <General, mpi, simcan, omnet>
    EnumMuOperation mutationOperator;   //Mutation operator
    int nLine;
    
    public mutantInfo(int nIndexMutant, String strDesc)
    {
        nNumber = nIndexMutant;
        strFullDescription = strDesc;
    }
    public mutantInfo(int nIndexMutant, int nIndexKiller, TestExecutionInfo TestsInfoIn, EnumMutantState enumMutantState, String strDesc) {
        
        nNumber=nIndexMutant;
        nTestKiller = nIndexKiller;
        eState = enumMutantState;
        strFullDescription = strDesc;
        testInfo = TestsInfoIn;
                
        mState = testInfo.getMutantState();
        
        //Parse the description
        parseDescription(strFullDescription);
    }
    public EnumOperatorClass getMutationClass()
    {
        return mutationClass;        
    }
    public String getMutationClassString()
    {
        String strRet="";
        
        if(mutationClass != null)
            strRet = mutationClass.toString();
            
        return strRet;            
    }
    public EnumMuOperation getMutationOperator()
    {
        return mutationOperator;        
    }
        
    public String ToStringReport()
    {
        String strRet;
        
        strRet = "";
        if(mutationClass != null && mutationOperator!= null)
            strRet = String.format("Class: %s , Operation: %s , Line: %d , Token: %s\n", mutationClass.toString(), mutationOperator.toString(), this.nLine, this.strMutatedToken);               
        
        return strRet;
    }
    public String ToString()
    {
        String strRet, strTestExecution,strLine;
        testInfo tInfo;
        strRet = "";
        
        strTestExecution= "";
        if(testInfo != null)
        {
            for(int i=0;i<testInfo.getNumberTests();i++)
            {
                tInfo = testInfo.getTest(i);

                strLine = String.format("%d,%f,%s|", tInfo.getNumber(), tInfo.getTime(),tInfo.getResult());
                strTestExecution = strTestExecution + strLine;
            }
        }
        
        if (eState == EnumMutantState.eMUTANT_ALIVE)
            strRet = String.format(">[%d] Alive!                | %s | Tests: <%s>", nNumber, strFullDescription,strTestExecution);
        else
            strRet = String.format(">[%d] Dead! killed by test %d | %s | Tests: <%s>", nNumber, nTestKiller, strFullDescription,strTestExecution);
                        
        return strRet;
    }
    public String toStringPlain()
    {
        StringBuffer strTestExecution;
        String strRet,strLine;
        testInfo tInfo;
        strRet = "";
        
        if(testInfo != null)
        {
            strTestExecution = new StringBuffer("");
        
            for(int i=0;i<testInfo.getNumberTests();i++)
            {
                tInfo = testInfo.getTest(i);

                strLine = String.format("%d,%f,%s,\n", tInfo.getNumber(), tInfo.getTime(),tInfo.getResult());
                strTestExecution.append(strLine);
            }

            if (eState == EnumMutantState.eMUTANT_ALIVE)
                //strRet = String.format("1,%s,%s,%s,\n",mutationClass.toString(),mutationOperator.toString(),strDescription );
                strRet = String.format("1,%d,%s,\n",testInfo.getNumberTests(),strFullDescription );
            else
                strRet = String.format("0,%d,%s,\n",testInfo.getNumberTests(),strFullDescription );

            strRet = strRet + strTestExecution.toString();
        }   
        
        return strRet;
    }

    public String getName() {
        String strName;
        
        strName = String.format("mutant_%04d",nNumber);
        
        return strName;
    }

    int getIndex() {
        return nNumber;
    }

    private void parseDescription(String strDesc) {
        String strAux, strLine, strClass, strSubClass;        
        String[] splitElems;
        
        strAux = strDesc;
        splitElems = strAux.split("\\|");
        
        if(splitElems.length == 4)
        {
            //Parse the line number.
            strLine = splitElems[0];
            strLine = strLine.replace("//Line:", "");
            strLine = strLine.trim();
            nLine = Integer.parseInt(strLine);
            
            //Get the Token (mutated line)
            strMutatedToken = splitElems[1];
            
            //Get the class
            strLine = strLine = splitElems[2];
            strLine = strLine.replace("Class: ", "");
            strLine = strLine.trim();
            mutationClass = EnumOperatorClass.valueOf(strLine);
            
            //Get the subclass
            strLine = strLine = splitElems[3];
            strLine = strLine.replace("Op: ", "");
            strLine = strLine.trim();
            mutationOperator = EnumMuOperation.valueOf(strLine);
        }
        else
        {
            System.out.printf("Error parsing mutant info!");
        }
    }

    EnumMutantState getState() {
        return mState;
    }
    public boolean isAlive()
    {
        return (mState == EnumMutantState.eMUTANT_ALIVE);
    }

    public int getTotalTests() {
        int nRet;
        
        if(testInfo != null)
            nRet = testInfo.getNumberTests();
        else
            nRet = 0;
        
        return nRet;
    }

    public int getTestTime(int i) {
        int nRet;
        
        if(testInfo != null)
            nRet = (int) testInfo.getTestTime(i);
        else
            nRet = 0;
        
        return nRet;
    }

    public double getTestsAverage() {
        double dRet;
        
        if(testInfo!=null)
            dRet = testInfo.getAverageTime();
        else
            dRet = 0;
        
        return dRet;
    }

    public boolean isAlive(int j) {
        boolean bRet;
        testInfo tInfo;
        bRet = false;

        if(testInfo!=null)
        {
            tInfo = testInfo.getTest(j);
            if(tInfo != null)
                bRet = tInfo.isAlive();
        }

        
        return bRet;
    }

    public void setMutationOperator(EnumMuOperation enumMuOperation) {
        this.mutationOperator = enumMuOperation;
    }

    public void setOperatorClass(EnumOperatorClass enumOperatorClass) {
        this.mutationClass = enumOperatorClass;
    }

    public void setIndex(int nIndex) {
        this.nNumber = nIndex;
    }

    public void setLine(int lineNumber) {
        this.nLine = lineNumber;
    }

    public void setToken(String token) {
        this.strMutatedToken = token;
    }
}
